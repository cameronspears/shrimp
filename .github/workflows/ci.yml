name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Run type checking
        run: bun run lint

      - name: Build project
        run: bun run build

      - name: Run tests with coverage
        run: bun test --coverage --coverage-reporter=lcov --coverage-reporter=text

      - name: Enforce coverage threshold (75%)
        run: |
          # Extract line coverage percentage from text output (2nd percentage value)
          coverage=$(bun test --coverage --coverage-reporter=text 2>&1 | grep -E 'All files.*\|' | grep -oE '[0-9]+\.[0-9]+' | sed -n '2p' || echo "0")
          echo "Line Coverage: ${coverage}%"

          # Use awk instead of bc for better compatibility
          if [ $(echo "$coverage" | awk '{print ($1 < 75)}') -eq 1 ]; then
            echo "ERROR: Line coverage ${coverage}% is below 75% threshold"
            exit 1
          fi
          echo "SUCCESS: Line coverage ${coverage}% meets 75% threshold"

      - name: Run health check on self (dogfooding)
        run: ./bin/shrimp.js check --threshold 50

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-security-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-security-

      - name: Install dependencies
        run: bun install

      - name: Run security audit
        run: |
          echo "Running security audit..."
          bun audit || {
            echo "WARNING: Security vulnerabilities found"
            exit 0
          }

      - name: Check for known vulnerabilities
        run: |
          # Create audit report
          bun audit --json > audit-report.json 2>&1 || true

          # Check for high/critical vulnerabilities
          if grep -q '"severity":"high"\|"severity":"critical"' audit-report.json 2>/dev/null; then
            echo "CRITICAL: High or critical vulnerabilities found"
            cat audit-report.json
            exit 1
          fi

  build-mcp:
    name: Build MCP Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-mcp-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-mcp-

      - name: Install main dependencies
        run: bun install

      - name: Build main project
        run: bun run build

      - name: Build MCP server
        run: |
          cd mcp-server
          bun install
          bun run build

      - name: Verify MCP build
        run: |
          if [ ! -f mcp-server/build/index.js ]; then
            echo "ERROR: MCP server build failed - index.js not found"
            exit 1
          fi
          echo "SUCCESS: MCP server built successfully"
          ls -lh mcp-server/build/

      - name: Upload MCP build artifact
        uses: actions/upload-artifact@v4
        with:
          name: mcp-server-build
          path: mcp-server/build/

  quality-gates:
    name: Quality Gates Summary
    runs-on: ubuntu-latest
    needs: [test, security, build-mcp]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "Test job: ${{ needs.test.result }}"
          echo "Security job: ${{ needs.security.result }}"
          echo "Build MCP job: ${{ needs.build-mcp.result }}"

          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "FAILED: Test job failed"
            exit 1
          fi

          if [ "${{ needs.security.result }}" != "success" ]; then
            echo "FAILED: Security job failed"
            exit 1
          fi

          if [ "${{ needs.build-mcp.result }}" != "success" ]; then
            echo "FAILED: Build MCP job failed"
            exit 1
          fi

          echo "SUCCESS: All quality gates passed!"
